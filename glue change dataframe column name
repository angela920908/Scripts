import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node Amazon S3
AmazonS3_node1669833302306 = glueContext.create_dynamic_frame.from_options(
    format_options={
        "quoteChar": '"',
        "withHeader": True,
        "separator": ",",
        "optimizePerformance": False,
    },
    connection_type="s3",
    format="csv",
    connection_options={
        "paths": [
            "s3://scf-configscan-ingress/Comcast Secure Configuration Compliance Checks 8.2022.csv"
        ],
        "recurse": True,
    },
    transformation_ctx="AmazonS3_node1669833302306",
)

df = AmazonS3_node1669833302306.toDF()
df_new = df.withColumnRenamed("Setting Name/ Required Control","Setting_Name_Required_Control").withColumnRenamed("""Control/    
Check Name""", "Control_Check_Name").withColumnRenamed("SP Rating", "SP_Rating").withColumnRenamed("Remediation Procedure/ Implementation Information", "Remediation_Procedure_Implementation_Information").withColumnRenamed("Standard Version", "Standard_Version")

from awsglue.dynamicframe import DynamicFrame
new = DynamicFrame.fromDF(df_new, glueContext, "df_new")

# Script generated for node ApplyMapping
ApplyMapping_node2 = ApplyMapping.apply(
    frame=new,
    mappings=[
        ("Control_Check_Name", "string", "control_check_name", "varchar"),
        ("SP_Rating", "string", "sp_rating", "varchar"),
        (
            "Setting_Name_Required_Control",
            "string",
            "setting_name_required_control",
            "varchar",
        ),
        ("description", "string", "description", "varchar"),
        (
            "Remediation_Procedure_Implementation_Information",
            "string",
            "remediation_procedure_implementation_information",
            "varchar",
        ),
        ("Standard_Version", "string", "standard_version", "varchar"),
        ("enabled", "string", "enabled", "varchar"),
    ],
    transformation_ctx="ApplyMapping_node2",
)

# Script generated for node Redshift Cluster
RedshiftCluster_node3 = glueContext.write_dynamic_frame.from_catalog(
    frame=ApplyMapping_node2,
    database="secutiry-controls",
    table_name="dev_security_controls_scf_config_scan",
    redshift_tmp_dir=args["TempDir"],
    transformation_ctx="RedshiftCluster_node3",
)

job.commit()
